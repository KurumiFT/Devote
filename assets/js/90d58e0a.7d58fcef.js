"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[416],{83953:e=>{e.exports=JSON.parse('{"functions":[{"name":"__index","desc":"Return Echelon\'s method or [Instance\'s](#instance) property / child if Echelon don\'t have it\\n\\n:::tip\\n    Use it for getting your instance property, don\'t get instance by yourself!\\n:::\\n\\n```lua\\nlocal myEon = Echelon.new(\'Part\')\\nmyEon:Setup(...) -- Get Echelon\'s method\\nprint(myEon.Transparency) -- Get Transparency prop from instance\\n```","params":[{"name":"index","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"((...any) -> (...any)) | any"}],"function_type":"static","source":{"line":53,"path":"src/Echelon/init.lua"}},{"name":"new","desc":"Return new `Echelon` object from ClassName\\n\\n```lua\\nlocal myEon = Echelon.new(\'Part\')\\n```","params":[{"name":"className","desc":"","lua_type":"string "}],"returns":[{"desc":"","lua_type":"Echelon\\r\\n"}],"function_type":"static","source":{"line":65,"path":"src/Echelon/init.lua"}},{"name":"from","desc":"Return new `Echelon` object from exist Instance  \\n<br/>If you use asset that should be cloned, then set `true` in second argument\\n```lua\\nlocal Asset = ReplicatedStorage.FireballAsset\\nlocal myEon = Echelon.from(Asset, true):Setup({Parent = workspace})\\n```","params":[{"name":"instance","desc":"","lua_type":"Instance"},{"name":"shouldClone","desc":"Should given instance be cloned","lua_type":"boolean"}],"returns":[{"desc":"","lua_type":"Echelon\\r\\n"}],"function_type":"static","source":{"line":81,"path":"src/Echelon/init.lua"}},{"name":"Setup","desc":"Set properties for Echelon\'s instance\\n\\n:::info\\n    This method safely sets the parent only after all properties have been set.\\n    Don\'t use standart \\"Instance.new(\'Part\', workspace)\\"\\n    Setting the parent before the set properties triggers a lot of \\"Changed\\" events!\\n:::\\n\\n```lua\\nlocal myEon = Echelon.new(\'Part\'):Setup({Name = \'MyPart\', Parent = workspace})\\n```","params":[{"name":"props","desc":"","lua_type":"{ [string] : any }"}],"returns":[{"desc":"","lua_type":"Echelon\\r\\n"}],"function_type":"method","source":{"line":101,"path":"src/Echelon/init.lua"}},{"name":"Tween","desc":"Create tween for Echelon\'s instance\\n```lua\\nlocal myEon = Echelon.from(Part)\\nmyEon:Tween(TweenInfo.new(1, Enum.EasingStyle.Sine), {Transparency = .5}, true) -- Create and start tween\\n```\\n\\n:::tip\\n    Prefer to use this instead TweenService:Create(...) cause that safely for caching instance\\n:::","params":[{"name":"tweenInfo","desc":"","lua_type":"TweenInfo"},{"name":"target","desc":"Tween\'s target props","lua_type":"{[any] : any}"},{"name":"shouldStart","desc":"Should start tween immediately","lua_type":"boolean"}],"returns":[{"desc":"","lua_type":"Tween\\r\\n"}],"function_type":"method","source":{"line":129,"path":"src/Echelon/init.lua"}}],"properties":[{"name":"Instance","desc":"Main property of `Echelon` object, that contain your instance\\n:::warning \\n    Don\'t get this, if you don\'t want to accidentally broke the Echelon :)\\n    Better use Indexing to the Instance props through Echelon\\n:::","lua_type":"Instance","private":true,"source":{"line":16,"path":"src/Echelon/init.lua"}},{"name":"Maid","desc":"Contain all Garbage from Echelon as Tweens and Instance ","lua_type":"Maid","private":true,"source":{"line":24,"path":"src/Echelon/init.lua"}}],"types":[],"name":"Echelon","desc":"Component for easier, safer and more convenient work with Instance","source":{"line":29,"path":"src/Echelon/init.lua"}}')}}]);