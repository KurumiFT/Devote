"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[416],{83953:e=>{e.exports=JSON.parse('{"functions":[{"name":"__index","desc":"Return Echelon\'s method if it exist or [Instance\'s](#instance) child as new Echelon or instance prop\\n\\n:::tip\\n    Use it for getting your instance property / child, don\'t get instance from Echelon by yourself!\\n:::\\n\\n```lua\\nlocal VFXAsset = ...\\n\\nlocal myEon = Echelon.from(VFXAsset, true)\\nmyEon:Setup(...) -- Get Echelon\'s method\\nprint(myEon.Transparency) -- Get Transparency prop from instance\\nmyEon.ParticleEmitter:Setup({Rate = 50}) -- Get VFXAsset child and setup it\\n```","params":[{"name":"index","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"((...any) -> (...any)) | Echelon | any"}],"function_type":"static","source":{"line":78,"path":"src/Echelon/init.lua"}},{"name":"new","desc":"Return new `Echelon` object from ClassName\\n\\n```lua\\nlocal myEon = Echelon.new(\'Part\')\\n```","params":[{"name":"className","desc":"","lua_type":"string "}],"returns":[{"desc":"","lua_type":"Echelon\\r\\n"}],"function_type":"static","source":{"line":107,"path":"src/Echelon/init.lua"}},{"name":"from","desc":"Return new `Echelon` object from exist Instance (*wrapping*)  \\nIf you use asset that should be cloned, then set `true` in second argument\\n```lua\\nlocal Asset = ReplicatedStorage.FireballAsset\\nlocal myEon = Echelon.from(Asset, true):Setup({Parent = workspace})\\n```","params":[{"name":"instance","desc":"","lua_type":"Instance"},{"name":"shouldClone","desc":"Should given instance be cloned","lua_type":"boolean?"},{"name":"cacheInfo","desc":"Private field","lua_type":"{[string] : any}?"}],"returns":[{"desc":"","lua_type":"Echelon\\r\\n"}],"function_type":"static","source":{"line":124,"path":"src/Echelon/init.lua"}},{"name":"Setup","desc":"Set properties for Echelon\'s instance\\n\\n:::info\\n    This method safely sets the parent only after all properties have been set.\\n    Don\'t use standart \\"Instance.new(\'Part\', workspace)\\"\\n    Setting the parent before the set properties triggers a lot of \\"Changed\\" events!\\n:::\\n\\n```lua\\nlocal myEon = Echelon.new(\'Part\'):Setup({Name = \'MyPart\', Parent = workspace})\\n```","params":[{"name":"props","desc":"","lua_type":"{ [string] : any }"}],"returns":[{"desc":"","lua_type":"Echelon\\r\\n"}],"function_type":"method","source":{"line":146,"path":"src/Echelon/init.lua"}},{"name":"Tween","desc":"Create tween for Echelon\'s instance\\n```lua\\nlocal myEon = Echelon.from(Part)\\nmyEon:Tween(TweenInfo.new(1, Enum.EasingStyle.Sine), {Transparency = .5}, true) -- Create and start tween\\n```\\n\\n:::tip\\n    Prefer to use this instead TweenService:Create(...) cause that safely for caching instance\\n:::","params":[{"name":"tweenInfo","desc":"","lua_type":"TweenInfo"},{"name":"target","desc":"Tween\'s target props","lua_type":"{[any] : any}"},{"name":"shouldStart","desc":"Should start tween immediately","lua_type":"boolean?"}],"returns":[{"desc":"","lua_type":"Tween\\r\\n"}],"function_type":"method","source":{"line":174,"path":"src/Echelon/init.lua"}},{"name":"_getInstance","desc":"Return Instance prop","params":[],"returns":[{"desc":"","lua_type":"Instance\\r\\n"}],"function_type":"method","private":true,"source":{"line":186,"path":"src/Echelon/init.lua"}},{"name":"cache","desc":"Assigns an Instance to a Cache Section by key  \\nWhen an instance is cached, it is automatically cloned  \\nDon\'t clone an asset when caching, this can cause undefined behavior.  \\n\\nWhen caching, the object is cloned `intial_size` times, which avoids cloning at times when performance is needed  \\n`ttl` - determines when an object is removed from the cache if it is not used for a given amount of time (in seconds).  \\n`0 | nil` - the object will be returned and remain in the cache until it is explicitly removed from there\\n```lua\\nEchelon.cache(\'Fireball\', Fireball_Asset, 10, 30) -- Cache fireball assets with 10 clones at once and TTL = 30\\nlocal myPart = Echelon.new(\'Part\'):Setup({Anchored = true, Transparency = .5})\\nEchelon.cache(\'MyPart\', myPart, 40) -- Cache created part with 40 clones at once without lifetime limit\\n```\\n\\n:::tip\\n    Cached object is the basis and all new objects in the current cache section will be its clones\\n    Use caching for frequently used objects, for example lasers / vfx, etc\\n:::\\n\\n:::warning\\n    If you use an already existing key, the cache will be overwritten and already existing objects will be deleted\\n:::","params":[{"name":"key","desc":"Key for cache section","lua_type":"string"},{"name":"instance","desc":"Target instance that should be cached","lua_type":"Instance | Echelon"},{"name":"intial_size","desc":"Intial size of cache | Default 0","lua_type":"number?"},{"name":"ttl","desc":"Time to live | Default nil","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"nil\\r\\n"}],"function_type":"static","source":{"line":218,"path":"src/Echelon/init.lua"}},{"name":"Destroy","desc":"Safely destroy Echelon with all instances\\n\\n```lua\\nlocal myEon = Echelon.new(\'Part\')\\nmyEon:Destroy() -- Destroy myEon object\\nmyEon:Setup({...}) -- ERROR!\\n```","params":[],"returns":[],"function_type":"method","source":{"line":257,"path":"src/Echelon/init.lua"}},{"name":"Debris","desc":"Improved version of `Debris:AddItem(Instance)`, that can working with caching\\n\\n```lua\\nlocal myEon = Echelon.fromCache(\'VFX\'):Setup({CFrame = CFrame.new(0, 0, 0), Parent = workspace})\\nmyEon:Tween(TweenInfo.new(1, Enum.EasingStyle.Sine), {Transparency = 1}, true)\\nmyEon:Debris(1)\\n```","params":[{"name":"time","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":273,"path":"src/Echelon/init.lua"}}],"properties":[{"name":"Instance","desc":"Main property of `Echelon` object, that contain your instance\\n:::warning \\n    Don\'t get this, if you don\'t want to accidentally broke the Echelon :)\\n    Better use Indexing to the Instance props through Echelon\\n:::","lua_type":"Instance","private":true,"source":{"line":21,"path":"src/Echelon/init.lua"}},{"name":"Maid","desc":"Contain all Garbage from Echelon as Tweens and Childs","lua_type":"Maid","private":true,"source":{"line":29,"path":"src/Echelon/init.lua"}},{"name":"CacheInfo","desc":"Contain information about linking the echelon to the cache","lua_type":"{[string] : any}?","private":true,"source":{"line":37,"path":"src/Echelon/init.lua"}}],"types":[{"name":"CacheSection","desc":"The type that section in the cache are represented by","lua_type":"{ Basis : Instance, ID : number, TTL : number, Used : number, Childs : {Instance} }","private":true,"source":{"line":45,"path":"src/Echelon/init.lua"}}],"name":"Echelon","desc":"Component for easier, safer and more convenient work with Instance","source":{"line":50,"path":"src/Echelon/init.lua"}}')}}]);