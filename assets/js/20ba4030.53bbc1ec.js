"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[747],{2464:n=>{n.exports=JSON.parse('{"functions":[{"name":"__index","desc":"Return Maid\'s method if exist or object from `Closet` by given index *(could be nil)*","params":[{"name":"index","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"((...any) -> (...any)) | Garbage?"}],"function_type":"static","source":{"line":60,"path":"src/Maid/init.lua"}},{"name":"__newindex","desc":" \\n\\nYou can add items into Maid by setting value on index\\n \\n:::tip\\n   Use this for frequently used instances, for example: Signal, UI...\\n:::\\n\\n```lua\\n    self.myMaid = Maid.new()\\n    self.myMaid[\'Frame\'] = Frame -- Attach Frame to Maid\\n\\n    -- In other function\\n    if self.myMaid[\'Frame\'] then\\n        self.myMaid[\'Frame\'].BackgroundTransparency = 1\\n        ...\\n    end\\n ```","params":[{"name":"index","desc":"","lua_type":"any"},{"name":"value","desc":"","lua_type":"Garbage?"}],"returns":[],"function_type":"static","source":{"line":89,"path":"src/Maid/init.lua"}},{"name":"new","desc":"Return new `Maid` object\\n\\n```lua\\n    local myMaid = Maid.new()\\n```","params":[{"name":"...","desc":"","lua_type":"Garbage?"}],"returns":[{"desc":"","lua_type":"Maid\\r\\n"}],"function_type":"static","source":{"line":104,"path":"src/Maid/init.lua"}},{"name":"Add","desc":"Push Garbage into Maid\\n\\n```lua\\n    local vfxPart = Instance.new(\'Part\')\\n    ...\\n\\n    myMaid:Add(vfxPart)\\n```\\n\\n:::note\\n    Don\'t forget that you can push multiple garbage in one call\\n:::","params":[{"name":"...","desc":"","lua_type":"Garbage"}],"returns":[{"desc":"","lua_type":"...Garbage\\r\\n"}],"function_type":"method","source":{"line":124,"path":"src/Maid/init.lua"}},{"name":"Destroy","desc":"Clean Maid from Garbage\\n\\n ```lua\\n     local myMaid = Maid.new()\\n     myMaid[\'testInstance\'] = Instance.new(\'Part\')\\n     \\n     print(myMaid[\'testInstance\']) -- Part\\n\\n     myMaid:Destroy()\\n\\n     print(myMaid[\'testInstance\']) -- nil\\n ```","params":[],"returns":[],"function_type":"method","source":{"line":146,"path":"src/Maid/init.lua"}},{"name":"Clean","desc":"*Allias of `Maid:Destroy()`*\\n\\n```lua\\n    local myMaid = Maid.new()\\n    myMaid[\'testInstance\'] = Instance.new(\'Part\')\\n    \\n    print(myMaid[\'testInstance\']) -- Part\\n\\n    myMaid:Clean()\\n\\n    print(myMaid[\'testInstance\']) -- nil\\n```","params":[],"returns":[],"function_type":"method","source":{"line":168,"path":"src/Maid/init.lua"}}],"properties":[{"name":"Closet","desc":"Store all garbage in `Maid` object","lua_type":"{ [any] : Garbage }","private":true,"source":{"line":29,"path":"src/Maid/init.lua"}}],"types":[{"name":"Garbage","desc":"#### Type of objects that contains in `Closet`\\nTable used as `Garbage` should implement `Destroy` method\\n\\n```lua\\n    ...\\n    local Signal = require(Packages.Signal)\\n\\n    local myMaid = Maid.new()\\n    local mySignal = myMaid:Add(Signal.new()) -- Signal implement Destroy method\\n```","lua_type":"Instance | table | RBXScriptConnection","source":{"line":20,"path":"src/Maid/init.lua"}}],"name":"Maid","desc":" \\nClass for preventing memory leaks","source":{"line":34,"path":"src/Maid/init.lua"}}')}}]);