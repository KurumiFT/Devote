[{"title":"Echelon","type":0,"sectionRef":"#","url":"/Devote/api/Echelon","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Echelon","url":"/Devote/api/Echelon#functions","content":" "},{"title":"__index​","type":1,"pageTitle":"Echelon","url":"/Devote/api/Echelon#__index","content":"&lt;/&gt; Echelon.__index(index: string) → ((...any) → (...any)) | any Return Echelon's method or Instance's property / child if Echelon don't have it tip Use it for getting your instance property, don't get instance by yourself! local myEon = Echelon.new('Part') myEon:Setup(...) -- Get Echelon's method print(myEon.Transparency) -- Get Transparency prop from instance   "},{"title":"new​","type":1,"pageTitle":"Echelon","url":"/Devote/api/Echelon#new","content":"&lt;/&gt; Echelon.new(className: string) → Echelon Return new Echelon object from ClassName local myEon = Echelon.new('Part')   "},{"title":"from​","type":1,"pageTitle":"Echelon","url":"/Devote/api/Echelon#from","content":"&lt;/&gt; Echelon.from( instance: Instance , shouldClone: boolean-- Should given instance be cloned ) → Echelon Return new Echelon object from exist Instance If you use asset that should be cloned, then set true in second argument local Asset = ReplicatedStorage.FireballAsset local myEon = Echelon.from(Asset, true):Setup({Parent = workspace})   "},{"title":"Setup​","type":1,"pageTitle":"Echelon","url":"/Devote/api/Echelon#Setup","content":"&lt;/&gt; Echelon:Setup(props: {[string]: any}) → Echelon Set properties for Echelon's instance info This method safely sets the parent only after all properties have been set. Don't use standart &quot;Instance.new('Part', workspace)&quot; Setting the parent before the set properties triggers a lot of &quot;Changed&quot; events! local myEon = Echelon.new('Part'):Setup({Name = 'MyPart', Parent = workspace})   "},{"title":"Tween​","type":1,"pageTitle":"Echelon","url":"/Devote/api/Echelon#Tween","content":"&lt;/&gt; Echelon:Tween( tweenInfo: TweenInfo , target: {[any]: any},-- Tween's target props shouldStart: boolean-- Should start tween immediately ) → Tween  Create tween for Echelon's instance local myEon = Echelon.from(Part) myEon:Tween(TweenInfo.new(1, Enum.EasingStyle.Sine), {Transparency = .5}, true) -- Create and start tween tip Prefer to use this instead TweenService:Create(...) cause that safely for caching instance  "},{"title":"Maid","type":0,"sectionRef":"#","url":"/Devote/api/Maid","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Maid","url":"/Devote/api/Maid#types","content":" "},{"title":"Garbage​","type":1,"pageTitle":"Maid","url":"/Devote/api/Maid#Garbage","content":"&lt;/&gt; type Garbage = Instance | table | RBXScriptConnection  Type of objects that contains in Closet Table used as Garbage should implement Destroy method -- Requires local Signal = require(Packages.Signal) local myMaid = Maid.new() local mySignal = myMaid:Add(Signal.new()) -- Signal implement Destroy method  "},{"title":"Functions​","type":1,"pageTitle":"Maid","url":"/Devote/api/Maid#functions","content":" "},{"title":"__index​","type":1,"pageTitle":"Maid","url":"/Devote/api/Maid#__index","content":"&lt;/&gt; Maid.__index(index: any) → ((...any) → (...any)) | Garbage? Return Maid's method if exist or object from Closet by given index (could be nil)  "},{"title":"__newindex​","type":1,"pageTitle":"Maid","url":"/Devote/api/Maid#__newindex","content":"&lt;/&gt; Maid.__newindex( index: any, value: Garbage? ) → () You can add items into Maid by setting value on index tip Use this for frequently used instances, for example: Signal, UI... self.myMaid = Maid.new() self.myMaid['Frame'] = Frame -- Attach Frame to Maid -- In other function if self.myMaid['Frame'] then self.myMaid['Frame'].BackgroundTransparency = 1 ... end   "},{"title":"new​","type":1,"pageTitle":"Maid","url":"/Devote/api/Maid#new","content":"&lt;/&gt; Maid.new(...: Garbage?) → Maid Return new Maid object local myMaid = Maid.new()   "},{"title":"Add​","type":1,"pageTitle":"Maid","url":"/Devote/api/Maid#Add","content":"&lt;/&gt; Maid:Add(...: Garbage) → ...Garbage Push Garbage into Maid local vfxPart = Instance.new('Part') -- TODO myMaid:Add(vfxPart) note Don't forget that you can push multiple garbage in one call   "},{"title":"Destroy​","type":1,"pageTitle":"Maid","url":"/Devote/api/Maid#Destroy","content":"&lt;/&gt; Maid:Destroy() → () Clean Maid from Garbage local myMaid = Maid.new() myMaid['testInstance'] = Instance.new('Part') print(myMaid['testInstance']) -- Part myMaid:Destroy() print(myMaid['testInstance']) -- nil   "},{"title":"Clean​","type":1,"pageTitle":"Maid","url":"/Devote/api/Maid#Clean","content":"&lt;/&gt; Maid:Clean() → () Allias of Maid:Destroy() local myMaid = Maid.new() myMaid['testInstance'] = Instance.new('Part') print(myMaid['testInstance']) -- Part myMaid:Clean() print(myMaid['testInstance']) -- nil  "}]